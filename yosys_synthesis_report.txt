aneeeshs@aneeeshs-VirtualBox:~/bsc/src/Eg02b$ yosys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.23 (git sha1 7ce5011c24b)


yosys> read_verilog mk_Multiply.v
1. Executing Verilog-2005 frontend: mk_Multiply.v
Parsing Verilog input from `mk_Multiply.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\mk_Multiply'.
Successfully finished Verilog frontend.

yosys>  synth_ecp5 -top mk_Multiply

2. Executing SYNTH_ECP5 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\DLLDELD'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCSC'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

2.3. Executing HIERARCHY pass (managing design hierarchy).

2.3.1. Analyzing design hierarchy..
Top module:  \mk_Multiply

2.3.2. Analyzing design hierarchy..
Top module:  \mk_Multiply
Removed 0 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:213$196'.
Cleaned up 1 empty switch.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:350$303 in module TRELLIS_FF.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255 in module DPR16X4C.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197 in module TRELLIS_DPR16X4.
Marked 1 switch rules as full_case in process $proc$mk_Multiply.v:382$77 in module mk_Multiply.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 42 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$304'.
  Set init value: \Q = 1'0

2.4.5. Executing PROC_ARST pass (detect async resets in processes).

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~22 debug messages>

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$304'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:350$303'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
Creating decoders for process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255'.
     1/3: $1$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_EN[3:0]$261
     2/3: $1$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_DATA[3:0]$260
     3/3: $1$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_ADDR[3:0]$259
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197'.
     1/3: $1$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_EN[3:0]$203
     2/3: $1$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_DATA[3:0]$202
     3/3: $1$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_ADDR[3:0]$201
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:213$196'.
Creating decoders for process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
     1/17: $0\status_stage4[0:0]
     2/17: $0\status_stage3[0:0]
     3/17: $0\status_stage2[0:0]
     4/17: $0\status_stage1[0:0]
     5/17: $0\sign_rule3[0:0]
     6/17: $0\sign_rule2[0:0]
     7/17: $0\sign_rule1[0:0]
     8/17: $0\sign[0:0]
     9/17: $0\result[65:0]
    10/17: $0\partial_prod3[79:0]
    11/17: $0\partial_prod2[79:0]
    12/17: $0\partial_prod1[79:0]
    13/17: $0\partial_prod0[79:0]
    14/17: $0\number2[31:0]
    15/17: $0\number1[31:0]
    16/17: $0\intermed_prod2[65:0]
    17/17: $0\intermed_prod1[65:0]

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:350$303'.
  created $dff cell `$procdff$413' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$239_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$240_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$241_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$242_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$243_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$244_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$245_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$246_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$247_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$248_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$249_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$250_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$251_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$252_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:281$253_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_ADDR' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255'.
  created $dff cell `$procdff$414' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_DATA' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255'.
  created $dff cell `$procdff$415' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/bin/../share/yosys/ecp5/cells_sim.v:287$254_EN' using process `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255'.
  created $dff cell `$procdff$416' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$179_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$180_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$181_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$182_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$183_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$184_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$185_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$186_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$187_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$188_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$189_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$190_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$191_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$192_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$193_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:207$194_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197'.
  created $dff cell `$procdff$417' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197'.
  created $dff cell `$procdff$418' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/bin/../share/yosys/ecp5/cells_sim.v:223$195_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197'.
  created $dff cell `$procdff$419' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:213$196'.
  created direct connection (no actual register cell created).
Creating register for signal `\mk_Multiply.\intermed_prod1' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$420' with positive edge clock.
Creating register for signal `\mk_Multiply.\intermed_prod2' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$421' with positive edge clock.
Creating register for signal `\mk_Multiply.\number1' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$422' with positive edge clock.
Creating register for signal `\mk_Multiply.\number2' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$423' with positive edge clock.
Creating register for signal `\mk_Multiply.\partial_prod0' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$424' with positive edge clock.
Creating register for signal `\mk_Multiply.\partial_prod1' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$425' with positive edge clock.
Creating register for signal `\mk_Multiply.\partial_prod2' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$426' with positive edge clock.
Creating register for signal `\mk_Multiply.\partial_prod3' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$427' with positive edge clock.
Creating register for signal `\mk_Multiply.\result' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$428' with positive edge clock.
Creating register for signal `\mk_Multiply.\sign' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$429' with positive edge clock.
Creating register for signal `\mk_Multiply.\sign_rule1' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$430' with positive edge clock.
Creating register for signal `\mk_Multiply.\sign_rule2' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$431' with positive edge clock.
Creating register for signal `\mk_Multiply.\sign_rule3' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$432' with positive edge clock.
Creating register for signal `\mk_Multiply.\status_stage1' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$433' with positive edge clock.
Creating register for signal `\mk_Multiply.\status_stage2' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$434' with positive edge clock.
Creating register for signal `\mk_Multiply.\status_stage3' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$435' with positive edge clock.
Creating register for signal `\mk_Multiply.\status_stage4' using process `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
  created $dff cell `$procdff$436' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$304'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:350$303'.
Removing empty process `TRELLIS_FF.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:350$303'.
Removing empty process `DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$278'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:285$255'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:0$221'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:221$197'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/bin/../share/yosys/ecp5/cells_sim.v:213$196'.
Found and cleaned up 18 empty switches in `\mk_Multiply.$proc$mk_Multiply.v:382$77'.
Removing empty process `mk_Multiply.$proc$mk_Multiply.v:382$77'.
Cleaned up 22 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.
<suppressed ~18 debug messages>

2.5. Executing FLATTEN pass (flatten design).

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 1 unused cells and 125 unused wires.
<suppressed ~2 debug messages>

2.10. Executing CHECK pass (checking for obvious problems).
Checking module mk_Multiply...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$mk_Multiply.v:249$8: \get_inp_multiplier -> { 1'0 \get_inp_multiplier [30:0] }
      Replacing known input bits on port A of cell $ternary$mk_Multiply.v:242$7: \get_inp_multiplicand -> { 1'0 \get_inp_multiplicand [30:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~50 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$436 ($dff) from module mk_Multiply (D = $procmux$328_Y, Q = \status_stage4, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$437 ($sdff) from module mk_Multiply (D = 1'1, Q = \status_stage4).
Adding SRST signal on $procdff$435 ($dff) from module mk_Multiply (D = $procmux$333_Y, Q = \status_stage3, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$439 ($sdff) from module mk_Multiply (D = 1'1, Q = \status_stage3).
Adding SRST signal on $procdff$434 ($dff) from module mk_Multiply (D = $procmux$338_Y, Q = \status_stage2, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$441 ($sdff) from module mk_Multiply (D = 1'1, Q = \status_stage2).
Adding SRST signal on $procdff$433 ($dff) from module mk_Multiply (D = $procmux$343_Y, Q = \status_stage1, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$443 ($sdff) from module mk_Multiply (D = 1'1, Q = \status_stage1).
Adding SRST signal on $procdff$432 ($dff) from module mk_Multiply (D = $procmux$348_Y, Q = \sign_rule3, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$445 ($sdff) from module mk_Multiply (D = \sign_rule2, Q = \sign_rule3).
Adding SRST signal on $procdff$431 ($dff) from module mk_Multiply (D = $procmux$353_Y, Q = \sign_rule2, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$447 ($sdff) from module mk_Multiply (D = \sign_rule1, Q = \sign_rule2).
Adding SRST signal on $procdff$430 ($dff) from module mk_Multiply (D = $procmux$358_Y, Q = \sign_rule1, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$449 ($sdff) from module mk_Multiply (D = \sign, Q = \sign_rule1).
Adding SRST signal on $procdff$429 ($dff) from module mk_Multiply (D = $procmux$363_Y, Q = \sign, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$451 ($sdff) from module mk_Multiply (D = \sign$D_IN, Q = \sign).
Adding SRST signal on $procdff$428 ($dff) from module mk_Multiply (D = $procmux$368_Y, Q = \result, rval = 66'000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$453 ($sdff) from module mk_Multiply (D = \result$D_IN, Q = \result).
Adding SRST signal on $procdff$427 ($dff) from module mk_Multiply (D = $procmux$373_Y, Q = \partial_prod3, rval = 80'00000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$455 ($sdff) from module mk_Multiply (D = { \sum1_prime__h1579 \sum2_prime__h1580 }, Q = \partial_prod3).
Adding SRST signal on $procdff$426 ($dff) from module mk_Multiply (D = $procmux$378_Y, Q = \partial_prod2, rval = 80'00000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$457 ($sdff) from module mk_Multiply (D = { \sum1_prime__h1274 \sum2_prime__h1275 }, Q = \partial_prod2).
Adding SRST signal on $procdff$425 ($dff) from module mk_Multiply (D = $procmux$383_Y, Q = \partial_prod1, rval = 80'00000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$459 ($sdff) from module mk_Multiply (D = { \sum1_prime__h969 \sum2_prime__h970 }, Q = \partial_prod1).
Adding SRST signal on $procdff$424 ($dff) from module mk_Multiply (D = $procmux$388_Y, Q = \partial_prod0, rval = 80'00000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$461 ($sdff) from module mk_Multiply (D = { \sum1_prime__h649 \sum2_prime__h650 }, Q = \partial_prod0).
Adding SRST signal on $procdff$423 ($dff) from module mk_Multiply (D = $procmux$393_Y, Q = \number2, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$463 ($sdff) from module mk_Multiply (D = \number2$D_IN, Q = \number2).
Adding SRST signal on $procdff$422 ($dff) from module mk_Multiply (D = $procmux$398_Y, Q = \number1, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$465 ($sdff) from module mk_Multiply (D = \number1$D_IN, Q = \number1).
Adding SRST signal on $procdff$421 ($dff) from module mk_Multiply (D = $procmux$403_Y, Q = \intermed_prod2, rval = 66'000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$467 ($sdff) from module mk_Multiply (D = \intermed_prod2$D_IN, Q = \intermed_prod2).
Adding SRST signal on $procdff$420 ($dff) from module mk_Multiply (D = $procmux$408_Y, Q = \intermed_prod1, rval = 66'000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$469 ($sdff) from module mk_Multiply (D = \intermed_prod1$D_IN, Q = \intermed_prod1).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 34 unused cells and 34 unused wires.
<suppressed ~35 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 18 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:233$5 ($add).
Removed top 2 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:237$6 ($add).
Removed top 31 bits (of 32) from port B of cell mk_Multiply.$add$mk_Multiply.v:307$12 ($add).
Removed top 31 bits (of 32) from port B of cell mk_Multiply.$add$mk_Multiply.v:308$14 ($add).
Removed top 63 bits (of 64) from port B of cell mk_Multiply.$add$mk_Multiply.v:309$16 ($add).
Removed top 8 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:311$17 ($mux).
Removed top 8 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:312$18 ($mux).
Removed top 8 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:313$19 ($mux).
Removed top 8 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:314$20 ($mux).
Removed top 7 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:315$21 ($mux).
Removed top 7 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:316$22 ($mux).
Removed top 7 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:317$23 ($mux).
Removed top 7 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:318$24 ($mux).
Removed top 6 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:319$25 ($mux).
Removed top 6 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:320$26 ($mux).
Removed top 6 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:321$27 ($mux).
Removed top 6 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:322$28 ($mux).
Removed top 5 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:323$29 ($mux).
Removed top 5 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:324$30 ($mux).
Removed top 5 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:325$31 ($mux).
Removed top 5 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:326$32 ($mux).
Removed top 4 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:327$33 ($mux).
Removed top 4 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:328$34 ($mux).
Removed top 4 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:329$35 ($mux).
Removed top 4 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:330$36 ($mux).
Removed top 3 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:331$37 ($mux).
Removed top 3 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:332$38 ($mux).
Removed top 3 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:333$39 ($mux).
Removed top 3 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:334$40 ($mux).
Removed top 2 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:335$41 ($mux).
Removed top 2 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:336$42 ($mux).
Removed top 2 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:337$43 ($mux).
Removed top 2 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:338$44 ($mux).
Removed top 1 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:339$45 ($mux).
Removed top 1 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:340$46 ($mux).
Removed top 1 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:341$47 ($mux).
Removed top 1 bits (of 40) from mux cell mk_Multiply.$ternary$mk_Multiply.v:342$48 ($mux).
Removed top 5 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:343$49 ($add).
Removed top 5 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:344$50 ($add).
Removed top 5 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:345$51 ($add).
Removed top 5 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:346$52 ($add).
Removed top 1 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:347$53 ($add).
Removed top 1 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:348$54 ($add).
Removed top 1 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:349$55 ($add).
Removed top 1 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:350$56 ($add).
Removed top 2 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:351$57 ($add).
Removed top 4 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:352$58 ($add).
Removed top 3 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:352$58 ($add).
Removed top 2 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:352$58 ($add).
Removed top 6 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:353$59 ($add).
Removed top 8 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:354$60 ($add).
Removed top 7 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:354$60 ($add).
Removed top 6 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:354$60 ($add).
Removed top 2 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:355$61 ($add).
Removed top 4 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:356$62 ($add).
Removed top 3 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:356$62 ($add).
Removed top 2 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:356$62 ($add).
Removed top 6 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:357$63 ($add).
Removed top 8 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:358$64 ($add).
Removed top 7 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:358$64 ($add).
Removed top 6 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:358$64 ($add).
Removed top 2 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:359$65 ($add).
Removed top 4 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:360$66 ($add).
Removed top 3 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:360$66 ($add).
Removed top 2 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:360$66 ($add).
Removed top 18 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:361$67 ($add).
Removed top 26 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:362$68 ($add).
Removed top 26 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:362$68 ($add).
Removed top 25 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:362$68 ($add).
Removed top 2 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:364$69 ($add).
Removed top 10 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:365$70 ($add).
Removed top 10 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:365$70 ($add).
Removed top 9 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:365$70 ($add).
Removed top 6 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:367$71 ($add).
Removed top 8 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:368$72 ($add).
Removed top 7 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:368$72 ($add).
Removed top 6 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:368$72 ($add).
Removed top 2 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:369$73 ($add).
Removed top 4 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:370$74 ($add).
Removed top 3 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:370$74 ($add).
Removed top 2 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:370$74 ($add).
Removed top 6 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:371$75 ($add).
Removed top 8 bits (of 40) from port A of cell mk_Multiply.$add$mk_Multiply.v:372$76 ($add).
Removed top 7 bits (of 40) from port B of cell mk_Multiply.$add$mk_Multiply.v:372$76 ($add).
Removed top 6 bits (of 40) from port Y of cell mk_Multiply.$add$mk_Multiply.v:372$76 ($add).
Removed top 2 bits (of 66) from FF cell mk_Multiply.$auto$ff.cc:266:slice$454 ($sdffe).
Removed top 2 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:271$9 ($add).
Removed top 2 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:271$9 ($add).
Removed top 2 bits (of 66) from port B of cell mk_Multiply.$add$mk_Multiply.v:271$9 ($add).
Removed top 2 bits (of 66) from FF cell mk_Multiply.$auto$ff.cc:266:slice$470 ($sdffe).
Removed top 2 bits (of 66) from FF cell mk_Multiply.$auto$ff.cc:266:slice$468 ($sdffe).
Removed top 2 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:233$5 ($add).
Removed top 2 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:233$5 ($add).
Removed top 2 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:237$6 ($add).
Removed top 2 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:237$6 ($add).
Removed top 25 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:361$67 ($add).
Removed top 17 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:361$67 ($add).
Removed top 9 bits (of 66) from port A of cell mk_Multiply.$add$mk_Multiply.v:364$69 ($add).
Removed top 2 bits (of 66) from port Y of cell mk_Multiply.$add$mk_Multiply.v:364$69 ($add).
Removed top 2 bits (of 66) from wire mk_Multiply.intermed_prod1.
Removed top 2 bits (of 66) from wire mk_Multiply.intermed_prod1$D_IN.
Removed top 2 bits (of 66) from wire mk_Multiply.intermed_prod2$D_IN.
Removed top 5 bits (of 40) from wire mk_Multiply.sm4__h1269.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

2.21.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

2.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mk_Multiply:
  creating $macc model for $add$mk_Multiply.v:233$5 ($add).
  creating $macc model for $add$mk_Multiply.v:237$6 ($add).
  creating $macc model for $add$mk_Multiply.v:271$9 ($add).
  creating $macc model for $add$mk_Multiply.v:307$12 ($add).
  creating $macc model for $add$mk_Multiply.v:308$14 ($add).
  creating $macc model for $add$mk_Multiply.v:309$16 ($add).
  creating $macc model for $add$mk_Multiply.v:343$49 ($add).
  creating $macc model for $add$mk_Multiply.v:344$50 ($add).
  creating $macc model for $add$mk_Multiply.v:345$51 ($add).
  creating $macc model for $add$mk_Multiply.v:346$52 ($add).
  creating $macc model for $add$mk_Multiply.v:347$53 ($add).
  creating $macc model for $add$mk_Multiply.v:348$54 ($add).
  creating $macc model for $add$mk_Multiply.v:349$55 ($add).
  creating $macc model for $add$mk_Multiply.v:350$56 ($add).
  creating $macc model for $add$mk_Multiply.v:351$57 ($add).
  creating $macc model for $add$mk_Multiply.v:352$58 ($add).
  creating $macc model for $add$mk_Multiply.v:353$59 ($add).
  creating $macc model for $add$mk_Multiply.v:354$60 ($add).
  creating $macc model for $add$mk_Multiply.v:355$61 ($add).
  creating $macc model for $add$mk_Multiply.v:356$62 ($add).
  creating $macc model for $add$mk_Multiply.v:357$63 ($add).
  creating $macc model for $add$mk_Multiply.v:358$64 ($add).
  creating $macc model for $add$mk_Multiply.v:359$65 ($add).
  creating $macc model for $add$mk_Multiply.v:360$66 ($add).
  creating $macc model for $add$mk_Multiply.v:361$67 ($add).
  creating $macc model for $add$mk_Multiply.v:362$68 ($add).
  creating $macc model for $add$mk_Multiply.v:364$69 ($add).
  creating $macc model for $add$mk_Multiply.v:365$70 ($add).
  creating $macc model for $add$mk_Multiply.v:367$71 ($add).
  creating $macc model for $add$mk_Multiply.v:368$72 ($add).
  creating $macc model for $add$mk_Multiply.v:369$73 ($add).
  creating $macc model for $add$mk_Multiply.v:370$74 ($add).
  creating $macc model for $add$mk_Multiply.v:371$75 ($add).
  creating $macc model for $add$mk_Multiply.v:372$76 ($add).
  merging $macc model for $add$mk_Multiply.v:365$70 into $add$mk_Multiply.v:364$69.
  merging $macc model for $add$mk_Multiply.v:362$68 into $add$mk_Multiply.v:361$67.
  merging $macc model for $add$mk_Multiply.v:351$57 into $add$mk_Multiply.v:350$56.
  merging $macc model for $add$mk_Multiply.v:369$73 into $add$mk_Multiply.v:349$55.
  merging $macc model for $add$mk_Multiply.v:359$65 into $add$mk_Multiply.v:348$54.
  merging $macc model for $add$mk_Multiply.v:355$61 into $add$mk_Multiply.v:347$53.
  merging $macc model for $add$mk_Multiply.v:371$75 into $add$mk_Multiply.v:346$52.
  merging $macc model for $add$mk_Multiply.v:367$71 into $add$mk_Multiply.v:345$51.
  merging $macc model for $add$mk_Multiply.v:357$63 into $add$mk_Multiply.v:344$50.
  merging $macc model for $add$mk_Multiply.v:353$59 into $add$mk_Multiply.v:343$49.
  merging $macc model for $add$mk_Multiply.v:364$69 into $add$mk_Multiply.v:237$6.
  creating $alu model for $macc $add$mk_Multiply.v:360$66.
  creating $alu model for $macc $add$mk_Multiply.v:358$64.
  creating $alu model for $macc $add$mk_Multiply.v:370$74.
  creating $alu model for $macc $add$mk_Multiply.v:356$62.
  creating $alu model for $macc $add$mk_Multiply.v:372$76.
  creating $alu model for $macc $add$mk_Multiply.v:354$60.
  creating $alu model for $macc $add$mk_Multiply.v:368$72.
  creating $alu model for $macc $add$mk_Multiply.v:352$58.
  creating $alu model for $macc $add$mk_Multiply.v:309$16.
  creating $alu model for $macc $add$mk_Multiply.v:308$14.
  creating $alu model for $macc $add$mk_Multiply.v:307$12.
  creating $alu model for $macc $add$mk_Multiply.v:271$9.
  creating $alu model for $macc $add$mk_Multiply.v:233$5.
  creating $macc cell for $add$mk_Multiply.v:346$52: $auto$alumacc.cc:365:replace_macc$476
  creating $macc cell for $add$mk_Multiply.v:345$51: $auto$alumacc.cc:365:replace_macc$477
  creating $macc cell for $add$mk_Multiply.v:344$50: $auto$alumacc.cc:365:replace_macc$478
  creating $macc cell for $add$mk_Multiply.v:343$49: $auto$alumacc.cc:365:replace_macc$479
  creating $macc cell for $add$mk_Multiply.v:361$67: $auto$alumacc.cc:365:replace_macc$480
  creating $macc cell for $add$mk_Multiply.v:350$56: $auto$alumacc.cc:365:replace_macc$481
  creating $macc cell for $add$mk_Multiply.v:349$55: $auto$alumacc.cc:365:replace_macc$482
  creating $macc cell for $add$mk_Multiply.v:348$54: $auto$alumacc.cc:365:replace_macc$483
  creating $macc cell for $add$mk_Multiply.v:237$6: $auto$alumacc.cc:365:replace_macc$484
  creating $macc cell for $add$mk_Multiply.v:347$53: $auto$alumacc.cc:365:replace_macc$485
  creating $alu cell for $add$mk_Multiply.v:233$5: $auto$alumacc.cc:485:replace_alu$486
  creating $alu cell for $add$mk_Multiply.v:271$9: $auto$alumacc.cc:485:replace_alu$489
  creating $alu cell for $add$mk_Multiply.v:307$12: $auto$alumacc.cc:485:replace_alu$492
  creating $alu cell for $add$mk_Multiply.v:308$14: $auto$alumacc.cc:485:replace_alu$495
  creating $alu cell for $add$mk_Multiply.v:309$16: $auto$alumacc.cc:485:replace_alu$498
  creating $alu cell for $add$mk_Multiply.v:352$58: $auto$alumacc.cc:485:replace_alu$501
  creating $alu cell for $add$mk_Multiply.v:368$72: $auto$alumacc.cc:485:replace_alu$504
  creating $alu cell for $add$mk_Multiply.v:354$60: $auto$alumacc.cc:485:replace_alu$507
  creating $alu cell for $add$mk_Multiply.v:372$76: $auto$alumacc.cc:485:replace_alu$510
  creating $alu cell for $add$mk_Multiply.v:356$62: $auto$alumacc.cc:485:replace_alu$513
  creating $alu cell for $add$mk_Multiply.v:370$74: $auto$alumacc.cc:485:replace_alu$516
  creating $alu cell for $add$mk_Multiply.v:358$64: $auto$alumacc.cc:485:replace_alu$519
  creating $alu cell for $add$mk_Multiply.v:360$66: $auto$alumacc.cc:485:replace_alu$522
  created 13 $alu and 10 $macc cells.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.23.6. Executing OPT_DFF pass (perform DFF optimizations).

2.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 11 unused cells and 9 unused wires.
<suppressed ~20 debug messages>

2.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.23.9. Rerunning OPT passes. (Maybe there is more to do..)

2.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.23.13. Executing OPT_DFF pass (perform DFF optimizations).

2.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.23.16. Finished OPT passes. (There is nothing left to do.)

2.24. Executing MEMORY pass.

2.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.24.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.24.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.24.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.24.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.24.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.24.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.24.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.24.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.26. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.27. Executing TECHMAP pass (map to technology primitives).

2.27.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4_'.
Successfully finished Verilog frontend.

2.27.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD_'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD_'.
Successfully finished Verilog frontend.

2.27.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.28. Executing OPT pass (performing simple optimizations).

2.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.
<suppressed ~103 debug messages>

2.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.28.3. Executing OPT_DFF pass (perform DFF optimizations).

2.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.28.5. Finished fast OPT passes.

2.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:315$21:
      Old ports: A=33'000000000000000000000000000000000, B={ \number1 1'0 }, Y=\sm2__h1267 [32:0]
      New ports: A=0, B=\number1, Y=\sm2__h1267 [32:1]
      New connections: \sm2__h1267 [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:316$22:
      Old ports: A=33'000000000000000000000000000000000, B={ \number1 1'0 }, Y=\sm2__h1572 [32:0]
      New ports: A=0, B=\number1, Y=\sm2__h1572 [32:1]
      New connections: \sm2__h1572 [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:317$23:
      Old ports: A=33'000000000000000000000000000000000, B={ \number1 1'0 }, Y=\sm2__h642 [32:0]
      New ports: A=0, B=\number1, Y=\sm2__h642 [32:1]
      New connections: \sm2__h642 [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:318$24:
      Old ports: A=33'000000000000000000000000000000000, B={ \number1 1'0 }, Y=\sm2__h962 [32:0]
      New ports: A=0, B=\number1, Y=\sm2__h962 [32:1]
      New connections: \sm2__h962 [0] = 1'0
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:319$25:
      Old ports: A=34'0000000000000000000000000000000000, B={ \number1 2'00 }, Y=\sm3__h1268 [33:0]
      New ports: A=0, B=\number1, Y=\sm3__h1268 [33:2]
      New connections: \sm3__h1268 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:320$26:
      Old ports: A=34'0000000000000000000000000000000000, B={ \number1 2'00 }, Y=\sm3__h1573 [33:0]
      New ports: A=0, B=\number1, Y=\sm3__h1573 [33:2]
      New connections: \sm3__h1573 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:321$27:
      Old ports: A=34'0000000000000000000000000000000000, B={ \number1 2'00 }, Y=\sm3__h643 [33:0]
      New ports: A=0, B=\number1, Y=\sm3__h643 [33:2]
      New connections: \sm3__h643 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:322$28:
      Old ports: A=34'0000000000000000000000000000000000, B={ \number1 2'00 }, Y=\sm3__h963 [33:0]
      New ports: A=0, B=\number1, Y=\sm3__h963 [33:2]
      New connections: \sm3__h963 [1:0] = 2'00
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:323$29:
      Old ports: A=35'00000000000000000000000000000000000, B={ \number1 3'000 }, Y=\sm4__h1269
      New ports: A=0, B=\number1, Y=\sm4__h1269 [34:3]
      New connections: \sm4__h1269 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:324$30:
      Old ports: A=35'00000000000000000000000000000000000, B={ \number1 3'000 }, Y=\sm4__h1574 [34:0]
      New ports: A=0, B=\number1, Y=\sm4__h1574 [34:3]
      New connections: \sm4__h1574 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:325$31:
      Old ports: A=35'00000000000000000000000000000000000, B={ \number1 3'000 }, Y=\sm4__h644 [34:0]
      New ports: A=0, B=\number1, Y=\sm4__h644 [34:3]
      New connections: \sm4__h644 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:326$32:
      Old ports: A=35'00000000000000000000000000000000000, B={ \number1 3'000 }, Y=\sm4__h964 [34:0]
      New ports: A=0, B=\number1, Y=\sm4__h964 [34:3]
      New connections: \sm4__h964 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:327$33:
      Old ports: A=36'000000000000000000000000000000000000, B={ \number1 4'0000 }, Y=\sm5__h1270 [35:0]
      New ports: A=0, B=\number1, Y=\sm5__h1270 [35:4]
      New connections: \sm5__h1270 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:328$34:
      Old ports: A=36'000000000000000000000000000000000000, B={ \number1 4'0000 }, Y=\sm5__h1575 [35:0]
      New ports: A=0, B=\number1, Y=\sm5__h1575 [35:4]
      New connections: \sm5__h1575 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:329$35:
      Old ports: A=36'000000000000000000000000000000000000, B={ \number1 4'0000 }, Y=\sm5__h645 [35:0]
      New ports: A=0, B=\number1, Y=\sm5__h645 [35:4]
      New connections: \sm5__h645 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:330$36:
      Old ports: A=36'000000000000000000000000000000000000, B={ \number1 4'0000 }, Y=\sm5__h965 [35:0]
      New ports: A=0, B=\number1, Y=\sm5__h965 [35:4]
      New connections: \sm5__h965 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:331$37:
      Old ports: A=37'0000000000000000000000000000000000000, B={ \number1 5'00000 }, Y=\sm6__h1271 [36:0]
      New ports: A=0, B=\number1, Y=\sm6__h1271 [36:5]
      New connections: \sm6__h1271 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:332$38:
      Old ports: A=37'0000000000000000000000000000000000000, B={ \number1 5'00000 }, Y=\sm6__h1576 [36:0]
      New ports: A=0, B=\number1, Y=\sm6__h1576 [36:5]
      New connections: \sm6__h1576 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:333$39:
      Old ports: A=37'0000000000000000000000000000000000000, B={ \number1 5'00000 }, Y=\sm6__h646 [36:0]
      New ports: A=0, B=\number1, Y=\sm6__h646 [36:5]
      New connections: \sm6__h646 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:334$40:
      Old ports: A=37'0000000000000000000000000000000000000, B={ \number1 5'00000 }, Y=\sm6__h966 [36:0]
      New ports: A=0, B=\number1, Y=\sm6__h966 [36:5]
      New connections: \sm6__h966 [4:0] = 5'00000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:335$41:
      Old ports: A=38'00000000000000000000000000000000000000, B={ \number1 6'000000 }, Y=\sm7__h1272 [37:0]
      New ports: A=0, B=\number1, Y=\sm7__h1272 [37:6]
      New connections: \sm7__h1272 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:336$42:
      Old ports: A=38'00000000000000000000000000000000000000, B={ \number1 6'000000 }, Y=\sm7__h1577 [37:0]
      New ports: A=0, B=\number1, Y=\sm7__h1577 [37:6]
      New connections: \sm7__h1577 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:337$43:
      Old ports: A=38'00000000000000000000000000000000000000, B={ \number1 6'000000 }, Y=\sm7__h647 [37:0]
      New ports: A=0, B=\number1, Y=\sm7__h647 [37:6]
      New connections: \sm7__h647 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:338$44:
      Old ports: A=38'00000000000000000000000000000000000000, B={ \number1 6'000000 }, Y=\sm7__h967 [37:0]
      New ports: A=0, B=\number1, Y=\sm7__h967 [37:6]
      New connections: \sm7__h967 [5:0] = 6'000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:339$45:
      Old ports: A=39'000000000000000000000000000000000000000, B={ \number1 7'0000000 }, Y=\sm8__h1273 [38:0]
      New ports: A=0, B=\number1, Y=\sm8__h1273 [38:7]
      New connections: \sm8__h1273 [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:340$46:
      Old ports: A=39'000000000000000000000000000000000000000, B={ \number1 7'0000000 }, Y=\sm8__h1578 [38:0]
      New ports: A=0, B=\number1, Y=\sm8__h1578 [38:7]
      New connections: \sm8__h1578 [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:341$47:
      Old ports: A=39'000000000000000000000000000000000000000, B={ \number1 7'0000000 }, Y=\sm8__h648 [38:0]
      New ports: A=0, B=\number1, Y=\sm8__h648 [38:7]
      New connections: \sm8__h648 [6:0] = 7'0000000
    Consolidated identical input bits for $mux cell $ternary$mk_Multiply.v:342$48:
      Old ports: A=39'000000000000000000000000000000000000000, B={ \number1 7'0000000 }, Y=\sm8__h968 [38:0]
      New ports: A=0, B=\number1, Y=\sm8__h968 [38:7]
      New connections: \sm8__h968 [6:0] = 7'0000000
  Optimizing cells in module \mk_Multiply.
Performed a total of 28 changes.

2.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.30.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 50 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 51 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 52 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 53 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 54 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 55 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 56 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 57 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 58 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 59 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 60 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 61 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 62 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.
Setting constant 0-bit at position 63 on $auto$ff.cc:266:slice$470 ($sdffe) from module mk_Multiply.

2.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.
<suppressed ~8 debug messages>

2.30.9. Rerunning OPT passes. (Maybe there is more to do..)

2.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_Multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

2.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_Multiply.
Performed a total of 0 changes.

2.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.30.13. Executing OPT_DFF pass (perform DFF optimizations).

2.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.30.16. Finished OPT passes. (There is nothing left to do.)

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$039520c137afc9cd69dd56c3fb11a4e1fbe5f664\_80_ecp5_alu for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add { \x__h1428 [37:5] \sm5__h1270 [4] 4'0000 } (38 bits, unsigned)
  add { \sm8__h1273 [38:7] 7'0000000 } (39 bits, unsigned)
  add { \sm7__h1272 [37:6] 6'000000 } (38 bits, unsigned)
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_80_ecp5_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_80_ecp5_alu for cells of type $alu.
Using template $paramod$d53b9a64cec2ce4cb6e4f151a385c7651ec71474\_80_ecp5_alu for cells of type $alu.
  add \partial_prod0 [39:0] (40 bits, unsigned)
  add { \partial_prod1 [39:0] 8'00000000 } (48 bits, unsigned)
  add \partial_prod0 [79:40] (40 bits, unsigned)
  add { \x__h1294 [33:1] \sm1__h1266 [0] } (34 bits, unsigned)
  add { \sm4__h1269 [34:3] 3'000 } (35 bits, unsigned)
  add { \sm3__h1268 [33:2] 2'00 } (34 bits, unsigned)
  add { \x__h1599 [33:1] \sm1__h1571 [0] } (34 bits, unsigned)
  add { \sm4__h1574 [34:3] 3'000 } (35 bits, unsigned)
  add { \sm3__h1573 [33:2] 2'00 } (34 bits, unsigned)
  add { \x__h669 [33:1] \sm1__h641 [0] } (34 bits, unsigned)
  add { \sm4__h644 [34:3] 3'000 } (35 bits, unsigned)
  add { \sm3__h643 [33:2] 2'00 } (34 bits, unsigned)
  add { \partial_prod2 [39:0] 16'0000000000000000 } (56 bits, unsigned)
  add { \partial_prod3 [79:40] 24'000000000000000000000000 } (64 bits, unsigned)
  add { \partial_prod3 [39:0] 24'000000000000000000000000 } (64 bits, unsigned)
  add { \partial_prod2 [79:40] 16'0000000000000000 } (56 bits, unsigned)
  add { \x__h1733 [37:5] \sm5__h1575 [4] 4'0000 } (38 bits, unsigned)
  add { \sm8__h1578 [38:7] 7'0000000 } (39 bits, unsigned)
  add { \sm7__h1577 [37:6] 6'000000 } (38 bits, unsigned)
  add { \x__h820 [37:5] \sm5__h645 [4] 4'0000 } (38 bits, unsigned)
  add { \sm8__h648 [38:7] 7'0000000 } (39 bits, unsigned)
  add { \sm7__h647 [37:6] 6'000000 } (38 bits, unsigned)
  add { \x__h1123 [37:5] \sm5__h965 [4] 4'0000 } (38 bits, unsigned)
  add { \sm8__h968 [38:7] 7'0000000 } (39 bits, unsigned)
  add { \sm7__h967 [37:6] 6'000000 } (38 bits, unsigned)
Using extmapper simplemap for cells of type $sdffe.
  add { \x__h989 [33:1] \sm1__h961 [0] } (34 bits, unsigned)
  add { \sm4__h964 [34:3] 3'000 } (35 bits, unsigned)
  add { \sm3__h963 [33:2] 2'00 } (34 bits, unsigned)
Using template $paramod$7ad0a2715cbe7438acc372ec84186a7c022b6ee1\_80_ecp5_alu for cells of type $alu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100011 for cells of type $fa.
Using template $paramod$445c63d4194be6438b67f4f941870a6ab959ba80\_80_ecp5_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000110000 for cells of type $fa.
Using template $paramod$959c9ddbaba0966d253c0f5ab1a5eabdad847a18\_80_ecp5_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~2396 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.
<suppressed ~2199 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_Multiply'.
Removed a total of 0 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 2812 unused cells and 2450 unused wires.
<suppressed ~2813 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_ALDFF_NP_'.
Generating RTLIL representation for module `\$_ALDFF_PP_'.
Generating RTLIL representation for module `\$_ALDFFE_NPN_'.
Generating RTLIL representation for module `\$_ALDFFE_NPP_'.
Generating RTLIL representation for module `\$_ALDFFE_PPN_'.
Generating RTLIL representation for module `\$_ALDFFE_PPP_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
No more expansions possible.
<suppressed ~641 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_Multiply.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.38. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in mk_Multiply.

2.39. Executing ATTRMVCP pass (move or copy attributes).

2.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_Multiply..
Removed 0 unused cells and 3420 unused wires.
<suppressed ~1 debug messages>

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.42. Executing ABC pass (technology mapping using ABC).

2.42.1. Extracting gate netlist of module `\mk_Multiply' to `<abc-temp-dir>/input.blif'..
Extracted 3665 gates and 4518 wires to a netlist network with 852 inputs and 2035 outputs.

2.42.1.1. Executing ABC.
Running ABC command: "berkeley-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =    1467.
ABC: Participating nodes from both networks       =    4071.
ABC: Participating nodes from the first network   =    2035. (  99.95 % of nodes)
ABC: Participating nodes from the second network  =    2036. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =    2035. (  99.95 % of names can be moved)
ABC: Node pairs (same polarity)                   =    2035. (  99.95 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     2035
ABC RESULTS:        internal signals:     1631
ABC RESULTS:           input signals:      852
ABC RESULTS:          output signals:     2035
Removing temp directory.
Removed 0 unused cells and 2921 unused wires.

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\$_ALDFF_NP_'.
Generating RTLIL representation for module `\$_ALDFF_PP_'.
Generating RTLIL representation for module `\$_ALDFFE_NPN_'.
Generating RTLIL representation for module `\$_ALDFFE_NPP_'.
Generating RTLIL representation for module `\$_ALDFFE_PPN_'.
Generating RTLIL representation for module `\$_ALDFFE_PPP_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$e0c3482ffb084741a73b670e53864891e76dd7a2\$lut for cells of type $lut.
Using template $paramod$8b57faafbba87cad697c2a6093f16b8a3ca08d41\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010110 for cells of type $lut.
Using template $paramod$5b22877e1c1ec08388b5bc1edf944369ddfbb440\$lut for cells of type $lut.
Using template $paramod$915a0e8a09d193f826a24e328cb76bfc84992eb8\$lut for cells of type $lut.
Using template $paramod$9d4f6d07a25f3fd6e69e2752945cb9ddf010c2ba\$lut for cells of type $lut.
Using template $paramod$78e1751931755f088c8bc676bcbc3bb642c26bfc\$lut for cells of type $lut.
Using template $paramod$5964dec528c7ded1ee9f528024feacf1107270a1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$3e5f29bd50772a1536d7d4bba80486b73846b5c7\$lut for cells of type $lut.
Using template $paramod$85b779ce5ab505dbf25e5e046fb43ca2b76b878b\$lut for cells of type $lut.
Using template $paramod$d2182c9e2aa103ddda08a150544f90acf58c515b\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~2354 debug messages>

2.44. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in mk_Multiply.
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12583.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12584.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12585.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12586.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12587.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12588.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12589.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12590.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12591.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12592.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12593.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12594.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12595.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12596.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12597.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12598.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12599.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12600.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12601.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12602.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12603.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12604.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12605.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12606.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12607.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12608.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12609.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12610.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12611.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12612.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12613.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12727.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12728.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12729.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12730.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12731.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12732.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12733.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12734.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12735.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12736.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12737.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12738.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12739.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12740.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12741.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12742.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12743.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12744.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12745.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12746.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12747.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12748.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12749.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12750.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12751.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12752.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12753.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12754.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12755.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12756.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12757.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12791.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12792.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12793.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12794.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12795.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12796.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12797.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12798.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12799.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12800.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12801.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12802.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12803.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12804.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12805.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12806.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12807.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12808.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12809.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12810.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12811.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12812.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12813.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12814.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12815.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12816.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12817.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12818.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12819.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12820.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12821.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12855.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12856.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12857.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12858.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12859.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12860.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12861.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12862.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12863.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12864.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12865.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12866.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12867.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12868.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12869.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12870.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12871.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12872.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12873.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12874.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12875.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12876.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12877.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12878.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12879.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12880.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12881.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12882.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12883.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12884.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$12885.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13013.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13014.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13015.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13016.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13017.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13018.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13019.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13020.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13021.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13022.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13023.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13024.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13025.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13026.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13027.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13028.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13029.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13030.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13031.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13032.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13033.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13034.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13035.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13036.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13037.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13038.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13039.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13040.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13041.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13042.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13043.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13077.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13078.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13079.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13080.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13081.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13082.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13083.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13084.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13085.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13086.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13087.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13088.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13089.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13090.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13091.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13092.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13093.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13094.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13095.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13096.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13097.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13098.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13099.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13100.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13101.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13102.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13103.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13104.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13105.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13106.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13107.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13141.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13142.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13143.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13144.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13145.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13146.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13147.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13148.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13149.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13150.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13151.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13152.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13153.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13154.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13155.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13156.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13157.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13158.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13159.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13160.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13161.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13162.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13163.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13164.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13165.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13166.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13167.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13168.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13169.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13170.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13171.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13205.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13206.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13207.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13208.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13209.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13210.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13211.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13212.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13213.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13214.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13215.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13216.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13217.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13218.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13219.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13220.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13221.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13222.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13223.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13224.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13225.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13226.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13227.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13228.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13229.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13230.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13231.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13232.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13233.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13234.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
  Optimizing lut $abc$11932$auto$blifparse.cc:525:parse_blif$13235.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 3)
Removed 0 unused cells and 4070 unused wires.

2.45. Executing AUTONAME pass.
Renamed 29458 objects in module mk_Multiply (13 iterations).
<suppressed ~7476 debug messages>

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \mk_Multiply

2.46.2. Analyzing design hierarchy..
Top module:  \mk_Multiply
Removed 0 unused modules.

2.47. Printing statistics.

=== mk_Multiply ===

   Number of wires:               2649
   Number of wire bits:           9711
   Number of public wires:        2649
   Number of public wire bits:    9711
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4951
     CCU2C                         470
     L6MUX21                       188
     LUT4                         2973
     PFUMX                         750
     TRELLIS_FF                    570

2.48. Executing CHECK pass (checking for obvious problems).
Checking module mk_Multiply...
Found and reported 0 problems.

