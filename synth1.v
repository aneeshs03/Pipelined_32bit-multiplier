/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

(* cells_not_processed =  1  *)
(* src = "mk_multiply.v:37.1-461.10" *)
module mk_multiply(CLK, RST_N, get_inp_multiplicand, get_inp_multiplier, EN_get_inp, RDY_get_inp, get_out_fst, RDY_get_out_fst, get_out_snd, RDY_get_out_snd);
  (* src = "mk_multiply.v:308.36-308.57" *)
  wire [31:0] _00_;
  (* src = "mk_multiply.v:309.36-309.55" *)
  wire [31:0] _01_;
  (* src = "mk_multiply.v:310.23-310.36" *)
  wire [63:0] _02_;
  (* src = "mk_multiply.v:50.10-50.13" *)
  input CLK;
  wire CLK;
  (* src = "mk_multiply.v:56.10-56.20" *)
  input EN_get_inp;
  wire EN_get_inp;
  (* src = "mk_multiply.v:57.10-57.21" *)
  output RDY_get_inp;
  wire RDY_get_inp;
  (* src = "mk_multiply.v:61.10-61.25" *)
  output RDY_get_out_fst;
  wire RDY_get_out_fst;
  (* src = "mk_multiply.v:65.10-65.25" *)
  output RDY_get_out_snd;
  wire RDY_get_out_snd;
  (* src = "mk_multiply.v:51.10-51.15" *)
  input RST_N;
  wire RST_N;
  (* src = "mk_multiply.v:162.17-162.25" *)
  wire [39:0] c__h1559;
  (* src = "mk_multiply.v:54.19-54.39" *)
  input [31:0] get_inp_multiplicand;
  wire [31:0] get_inp_multiplicand;
  (* src = "mk_multiply.v:55.19-55.37" *)
  input [31:0] get_inp_multiplier;
  wire [31:0] get_inp_multiplier;
  (* src = "mk_multiply.v:60.10-60.21" *)
  output get_out_fst;
  wire get_out_fst;
  (* src = "mk_multiply.v:64.19-64.30" *)
  output [63:0] get_out_snd;
  wire [63:0] get_out_snd;
  (* src = "mk_multiply.v:72.16-72.30" *)
  reg [65:0] intermed_prod1;
  (* src = "mk_multiply.v:73.17-73.36" *)
  wire [65:0] \intermed_prod1$D_IN ;
  (* src = "mk_multiply.v:74.8-74.25" *)
  wire \intermed_prod1$EN ;
  (* src = "mk_multiply.v:77.16-77.30" *)
  reg [65:0] intermed_prod2;
  (* src = "mk_multiply.v:78.17-78.36" *)
  wire [65:0] \intermed_prod2$D_IN ;
  (* src = "mk_multiply.v:79.8-79.25" *)
  wire \intermed_prod2$EN ;
  (* src = "mk_multiply.v:82.16-82.24" *)
  reg [31:0] number_1;
  (* src = "mk_multiply.v:83.17-83.30" *)
  wire [31:0] \number_1$D_IN ;
  (* src = "mk_multiply.v:84.8-84.19" *)
  wire \number_1$EN ;
  (* src = "mk_multiply.v:87.16-87.24" *)
  reg [31:0] number_2;
  (* src = "mk_multiply.v:88.17-88.30" *)
  wire [31:0] \number_2$D_IN ;
  (* src = "mk_multiply.v:89.8-89.19" *)
  wire \number_2$EN ;
  (* src = "mk_multiply.v:219.17-219.40" *)
  wire [31:0] op_partial_prod1__h2350;
  (* src = "mk_multiply.v:219.42-219.65" *)
  wire [31:0] op_partial_prod2__h2405;
  (* src = "mk_multiply.v:161.17-161.27" *)
  wire [63:0] out__h2457;
  (* src = "mk_multiply.v:92.16-92.29" *)
  reg [79:0] partial_prod0;
  (* src = "mk_multiply.v:93.17-93.35" *)
  wire [79:0] \partial_prod0$D_IN ;
  (* src = "mk_multiply.v:94.8-94.24" *)
  wire \partial_prod0$EN ;
  (* src = "mk_multiply.v:97.16-97.29" *)
  reg [79:0] partial_prod1;
  (* src = "mk_multiply.v:98.17-98.35" *)
  wire [79:0] \partial_prod1$D_IN ;
  (* src = "mk_multiply.v:99.8-99.24" *)
  wire \partial_prod1$EN ;
  (* src = "mk_multiply.v:102.16-102.29" *)
  reg [79:0] partial_prod2;
  (* src = "mk_multiply.v:103.17-103.35" *)
  wire [79:0] \partial_prod2$D_IN ;
  (* src = "mk_multiply.v:104.8-104.24" *)
  wire \partial_prod2$EN ;
  (* src = "mk_multiply.v:107.16-107.29" *)
  reg [79:0] partial_prod3;
  (* src = "mk_multiply.v:108.17-108.35" *)
  wire [79:0] \partial_prod3$D_IN ;
  (* src = "mk_multiply.v:109.8-109.24" *)
  wire \partial_prod3$EN ;
  (* src = "mk_multiply.v:112.16-112.22" *)
  (* unused_bits = "64 65" *)
  reg [65:0] result;
  (* src = "mk_multiply.v:113.17-113.28" *)
  wire [65:0] \result$D_IN ;
  (* src = "mk_multiply.v:114.8-114.17" *)
  wire \result$EN ;
  (* src = "mk_multiply.v:117.7-117.11" *)
  reg sign;
  (* src = "mk_multiply.v:118.8-118.17" *)
  wire \sign$D_IN ;
  (* src = "mk_multiply.v:118.19-118.26" *)
  wire \sign$EN ;
  (* src = "mk_multiply.v:121.7-121.12" *)
  reg sign1;
  (* src = "mk_multiply.v:122.8-122.18" *)
  wire \sign1$D_IN ;
  (* src = "mk_multiply.v:122.20-122.28" *)
  wire \sign1$EN ;
  (* src = "mk_multiply.v:125.7-125.12" *)
  reg sign2;
  (* src = "mk_multiply.v:126.8-126.18" *)
  wire \sign2$D_IN ;
  (* src = "mk_multiply.v:126.20-126.28" *)
  wire \sign2$EN ;
  (* src = "mk_multiply.v:129.7-129.12" *)
  reg sign3;
  (* src = "mk_multiply.v:130.8-130.18" *)
  wire \sign3$D_IN ;
  (* src = "mk_multiply.v:130.20-130.28" *)
  wire \sign3$EN ;
  (* src = "mk_multiply.v:163.3-163.13" *)
  wire [39:0] sm1__h1266;
  (* src = "mk_multiply.v:164.3-164.13" *)
  wire [39:0] sm1__h1571;
  (* src = "mk_multiply.v:165.3-165.12" *)
  wire [39:0] sm1__h641;
  (* src = "mk_multiply.v:166.3-166.12" *)
  wire [39:0] sm1__h961;
  (* src = "mk_multiply.v:167.3-167.13" *)
  wire [39:0] sm2__h1267;
  (* src = "mk_multiply.v:168.3-168.13" *)
  wire [39:0] sm2__h1572;
  (* src = "mk_multiply.v:169.3-169.12" *)
  wire [39:0] sm2__h642;
  (* src = "mk_multiply.v:170.3-170.12" *)
  wire [39:0] sm2__h962;
  (* src = "mk_multiply.v:171.3-171.13" *)
  wire [39:0] sm3__h1268;
  (* src = "mk_multiply.v:172.3-172.13" *)
  wire [39:0] sm3__h1573;
  (* src = "mk_multiply.v:173.3-173.12" *)
  wire [39:0] sm3__h643;
  (* src = "mk_multiply.v:174.3-174.12" *)
  wire [39:0] sm3__h963;
  (* src = "mk_multiply.v:175.3-175.13" *)
  wire [39:0] sm4__h1269;
  (* src = "mk_multiply.v:176.3-176.13" *)
  wire [39:0] sm4__h1574;
  (* src = "mk_multiply.v:177.3-177.12" *)
  wire [39:0] sm4__h644;
  (* src = "mk_multiply.v:178.3-178.12" *)
  wire [39:0] sm4__h964;
  (* src = "mk_multiply.v:179.3-179.13" *)
  wire [39:0] sm5__h1270;
  (* src = "mk_multiply.v:180.3-180.13" *)
  wire [39:0] sm5__h1575;
  (* src = "mk_multiply.v:181.3-181.12" *)
  wire [39:0] sm5__h645;
  (* src = "mk_multiply.v:182.3-182.12" *)
  wire [39:0] sm5__h965;
  (* src = "mk_multiply.v:183.3-183.13" *)
  wire [39:0] sm6__h1271;
  (* src = "mk_multiply.v:184.3-184.13" *)
  wire [39:0] sm6__h1576;
  (* src = "mk_multiply.v:185.3-185.12" *)
  wire [39:0] sm6__h646;
  (* src = "mk_multiply.v:186.3-186.12" *)
  wire [39:0] sm6__h966;
  (* src = "mk_multiply.v:187.3-187.13" *)
  wire [39:0] sm7__h1272;
  (* src = "mk_multiply.v:188.3-188.13" *)
  wire [39:0] sm7__h1577;
  (* src = "mk_multiply.v:189.3-189.12" *)
  wire [39:0] sm7__h647;
  (* src = "mk_multiply.v:190.3-190.12" *)
  wire [39:0] sm7__h967;
  (* src = "mk_multiply.v:191.3-191.13" *)
  wire [39:0] sm8__h1273;
  (* src = "mk_multiply.v:192.3-192.13" *)
  wire [39:0] sm8__h1578;
  (* src = "mk_multiply.v:193.3-193.12" *)
  wire [39:0] sm8__h648;
  (* src = "mk_multiply.v:194.3-194.12" *)
  wire [39:0] sm8__h968;
  (* src = "mk_multiply.v:133.7-133.18" *)
  reg status_stg1;
  (* src = "mk_multiply.v:134.8-134.24" *)
  wire \status_stg1$D_IN ;
  (* src = "mk_multiply.v:134.26-134.40" *)
  wire \status_stg1$EN ;
  (* src = "mk_multiply.v:137.7-137.18" *)
  reg status_stg2;
  (* src = "mk_multiply.v:138.8-138.24" *)
  wire \status_stg2$D_IN ;
  (* src = "mk_multiply.v:138.26-138.40" *)
  wire \status_stg2$EN ;
  (* src = "mk_multiply.v:141.7-141.18" *)
  reg status_stg3;
  (* src = "mk_multiply.v:142.8-142.24" *)
  wire \status_stg3$D_IN ;
  (* src = "mk_multiply.v:142.26-142.40" *)
  wire \status_stg3$EN ;
  (* src = "mk_multiply.v:145.7-145.18" *)
  reg status_stg4;
  (* src = "mk_multiply.v:146.8-146.24" *)
  wire \status_stg4$D_IN ;
  (* src = "mk_multiply.v:146.26-146.40" *)
  wire \status_stg4$EN ;
  (* src = "mk_multiply.v:195.3-195.20" *)
  wire [39:0] sum1_prime__h1274;
  (* src = "mk_multiply.v:196.3-196.20" *)
  wire [39:0] sum1_prime__h1579;
  (* src = "mk_multiply.v:197.3-197.19" *)
  wire [39:0] sum1_prime__h649;
  (* src = "mk_multiply.v:198.3-198.19" *)
  wire [39:0] sum1_prime__h969;
  (* src = "mk_multiply.v:199.3-199.20" *)
  wire [39:0] sum2_prime__h1275;
  (* src = "mk_multiply.v:200.3-200.20" *)
  wire [39:0] sum2_prime__h1580;
  (* src = "mk_multiply.v:201.3-201.19" *)
  wire [39:0] sum2_prime__h650;
  (* src = "mk_multiply.v:202.3-202.19" *)
  wire [39:0] sum2_prime__h970;
  (* src = "mk_multiply.v:203.3-203.11" *)
  wire [39:0] x__h1122;
  (* src = "mk_multiply.v:204.3-204.11" *)
  wire [39:0] x__h1123;
  (* src = "mk_multiply.v:205.3-205.11" *)
  wire [39:0] x__h1293;
  (* src = "mk_multiply.v:206.3-206.11" *)
  wire [39:0] x__h1294;
  (* src = "mk_multiply.v:207.3-207.11" *)
  wire [39:0] x__h1427;
  (* src = "mk_multiply.v:208.3-208.11" *)
  wire [39:0] x__h1428;
  (* src = "mk_multiply.v:209.3-209.11" *)
  wire [39:0] x__h1598;
  (* src = "mk_multiply.v:210.3-210.11" *)
  wire [39:0] x__h1599;
  (* src = "mk_multiply.v:211.3-211.11" *)
  wire [39:0] x__h1732;
  (* src = "mk_multiply.v:212.3-212.11" *)
  wire [39:0] x__h1733;
  (* src = "mk_multiply.v:149.17-149.25" *)
  wire [65:0] x__h1922;
  (* src = "mk_multiply.v:150.3-150.11" *)
  wire [65:0] x__h1924;
  (* src = "mk_multiply.v:151.3-151.11" *)
  wire [65:0] x__h1926;
  (* src = "mk_multiply.v:152.3-152.11" *)
  wire [65:0] x__h2049;
  (* src = "mk_multiply.v:153.3-153.11" *)
  wire [65:0] x__h2051;
  (* src = "mk_multiply.v:154.3-154.11" *)
  wire [65:0] x__h2053;
  (* src = "mk_multiply.v:213.3-213.10" *)
  wire [39:0] x__h668;
  (* src = "mk_multiply.v:214.3-214.10" *)
  wire [39:0] x__h669;
  (* src = "mk_multiply.v:215.3-215.10" *)
  wire [39:0] x__h819;
  (* src = "mk_multiply.v:216.3-216.10" *)
  wire [39:0] x__h820;
  (* src = "mk_multiply.v:217.3-217.10" *)
  wire [39:0] x__h988;
  (* src = "mk_multiply.v:218.3-218.10" *)
  wire [39:0] x__h989;
  (* src = "mk_multiply.v:155.3-155.11" *)
  wire [65:0] y__h1923;
  (* src = "mk_multiply.v:156.3-156.11" *)
  wire [65:0] y__h1925;
  (* src = "mk_multiply.v:157.3-157.11" *)
  wire [65:0] y__h1927;
  (* src = "mk_multiply.v:158.3-158.11" *)
  wire [65:0] y__h2050;
  (* src = "mk_multiply.v:159.3-159.11" *)
  wire [65:0] y__h2052;
  (* src = "mk_multiply.v:160.3-160.11" *)
  wire [65:0] y__h2054;
  assign \intermed_prod1$D_IN  = x__h1922 + (* src = "mk_multiply.v:233.32-233.51" *) { 18'h00000, partial_prod1[79:40], 8'h00 };
  assign \intermed_prod2$D_IN  = x__h2049 + (* src = "mk_multiply.v:237.32-237.51" *) { 2'h0, partial_prod3[79:40], 24'h000000 };
  assign \result$D_IN  = intermed_prod1 + (* src = "mk_multiply.v:271.24-271.55" *) intermed_prod2;
  assign op_partial_prod1__h2350 = _00_ + (* src = "mk_multiply.v:308.36-308.65" *) 32'd1;
  assign op_partial_prod2__h2405 = _01_ + (* src = "mk_multiply.v:309.36-309.63" *) 32'd1;
  assign out__h2457 = _02_ + (* src = "mk_multiply.v:310.23-310.44" *) 64'h0000000000000001;
  assign sum1_prime__h1274 = x__h1293 + (* src = "mk_multiply.v:343.30-343.51" *) sm4__h1269;
  assign sum1_prime__h1579 = x__h1598 + (* src = "mk_multiply.v:344.30-344.51" *) sm4__h1574;
  assign sum1_prime__h649 = x__h668 + (* src = "mk_multiply.v:345.29-345.48" *) sm4__h644;
  assign sum1_prime__h969 = x__h988 + (* src = "mk_multiply.v:346.29-346.48" *) sm4__h964;
  assign sum2_prime__h1275 = x__h1427 + (* src = "mk_multiply.v:347.30-347.51" *) sm8__h1273;
  assign sum2_prime__h1580 = x__h1732 + (* src = "mk_multiply.v:348.30-348.51" *) sm8__h1578;
  assign sum2_prime__h650 = x__h819 + (* src = "mk_multiply.v:349.29-349.48" *) sm8__h648;
  assign sum2_prime__h970 = x__h1122 + (* src = "mk_multiply.v:350.29-350.49" *) sm8__h968;
  assign x__h1122 = x__h1123 + (* src = "mk_multiply.v:351.21-351.41" *) sm7__h967;
  assign x__h1123 = sm5__h965 + (* src = "mk_multiply.v:352.21-352.42" *) sm6__h966;
  assign x__h1293 = x__h1294 + (* src = "mk_multiply.v:353.21-353.42" *) sm3__h1268;
  assign x__h1294 = sm1__h1266 + (* src = "mk_multiply.v:354.21-354.44" *) sm2__h1267;
  assign x__h1427 = x__h1428 + (* src = "mk_multiply.v:355.21-355.42" *) sm7__h1272;
  assign x__h1428 = sm5__h1270 + (* src = "mk_multiply.v:356.21-356.44" *) sm6__h1271;
  assign x__h1598 = x__h1599 + (* src = "mk_multiply.v:357.21-357.42" *) sm3__h1573;
  assign x__h1599 = sm1__h1571 + (* src = "mk_multiply.v:358.21-358.44" *) sm2__h1572;
  assign x__h1732 = x__h1733 + (* src = "mk_multiply.v:359.21-359.42" *) sm7__h1577;
  assign x__h1733 = sm5__h1575 + (* src = "mk_multiply.v:360.21-360.44" *) sm6__h1576;
  assign x__h1922 = x__h1924 + (* src = "mk_multiply.v:361.21-361.40" *) { 18'h00000, partial_prod1[39:0], 8'h00 };
  assign x__h1924 = { 26'h0000000, partial_prod0[39:0] } + (* src = "mk_multiply.v:362.21-362.40" *) { 26'h0000000, partial_prod0[79:40] };
  assign x__h2049 = x__h2051 + (* src = "mk_multiply.v:364.21-364.40" *) { 2'h0, partial_prod3[39:0], 24'h000000 };
  assign x__h2051 = { 10'h000, partial_prod2[39:0], 16'h0000 } + (* src = "mk_multiply.v:365.21-365.40" *) { 10'h000, partial_prod2[79:40], 16'h0000 };
  assign x__h668 = x__h669 + (* src = "mk_multiply.v:367.20-367.39" *) sm3__h643;
  assign x__h669 = sm1__h641 + (* src = "mk_multiply.v:368.20-368.41" *) sm2__h642;
  assign x__h819 = x__h820 + (* src = "mk_multiply.v:369.20-369.39" *) sm7__h647;
  assign x__h820 = sm5__h645 + (* src = "mk_multiply.v:370.20-370.41" *) sm6__h646;
  assign x__h988 = x__h989 + (* src = "mk_multiply.v:371.20-371.39" *) sm3__h963;
  assign x__h989 = sm1__h961 + (* src = "mk_multiply.v:372.20-372.41" *) sm2__h962;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) status_stg4 <= 1'h0;
    else if (status_stg3) status_stg4 <= 1'h1;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) status_stg3 <= 1'h0;
    else if (status_stg2) status_stg3 <= 1'h1;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) status_stg2 <= 1'h0;
    else if (status_stg1) status_stg2 <= 1'h1;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) status_stg1 <= 1'h0;
    else if (EN_get_inp) status_stg1 <= 1'h1;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) sign3 <= 1'h0;
    else if (status_stg3) sign3 <= sign2;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) sign2 <= 1'h0;
    else if (status_stg2) sign2 <= sign1;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) sign1 <= 1'h0;
    else if (status_stg1) sign1 <= sign;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) sign <= 1'h0;
    else if (EN_get_inp) sign <= \sign$D_IN ;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) result <= 66'h00000000000000000;
    else if (status_stg3) result <= \result$D_IN ;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) partial_prod3 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod3 <= { sum1_prime__h1579, sum2_prime__h1580 };
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) partial_prod2 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod2 <= { sum1_prime__h1274, sum2_prime__h1275 };
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) partial_prod1 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod1 <= { sum1_prime__h969, sum2_prime__h970 };
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) partial_prod0 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod0 <= { sum1_prime__h649, sum2_prime__h650 };
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) number_2 <= 32'd0;
    else if (EN_get_inp) number_2 <= \number_2$D_IN ;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) number_1 <= 32'd0;
    else if (EN_get_inp) number_1 <= \number_1$D_IN ;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) intermed_prod2 <= 66'h00000000000000000;
    else if (status_stg2) intermed_prod2 <= \intermed_prod2$D_IN ;
  (* src = "mk_multiply.v:382.3-434.6" *)
  always @(posedge CLK)
    if (!RST_N) intermed_prod1 <= 66'h00000000000000000;
    else if (status_stg2) intermed_prod1 <= \intermed_prod1$D_IN ;
  assign RDY_get_out_fst = status_stg1 && (* src = "mk_multiply.v:226.28-226.54" *) status_stg4;
  assign RDY_get_inp = ! (* src = "mk_multiply.v:222.24-222.36" *) status_stg1;
  assign _00_ = ~ (* src = "mk_multiply.v:308.36-308.57" *) get_inp_multiplicand;
  assign _01_ = ~ (* src = "mk_multiply.v:309.36-309.55" *) get_inp_multiplier;
  assign _02_ = ~ (* src = "mk_multiply.v:310.23-310.36" *) result[63:0];
  assign get_out_snd = sign3 ? (* src = "mk_multiply.v:229.24-229.57" *) out__h2457 : result[63:0];
  assign \number_1$D_IN  = get_inp_multiplicand[31] ? (* src = "mk_multiply.v:242.7-244.29" *) op_partial_prod1__h2350 : { 1'h0, get_inp_multiplicand[30:0] };
  assign \number_2$D_IN  = get_inp_multiplier[31] ? (* src = "mk_multiply.v:249.7-251.27" *) op_partial_prod2__h2405 : { 1'h0, get_inp_multiplier[30:0] };
  assign sm1__h1266 = number_2[16] ? (* src = "mk_multiply.v:311.23-311.54" *) { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h1571 = number_2[24] ? (* src = "mk_multiply.v:312.23-312.54" *) { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h641 = number_2[0] ? (* src = "mk_multiply.v:313.22-313.52" *) { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h961 = number_2[8] ? (* src = "mk_multiply.v:314.22-314.52" *) { 8'h00, number_1 } : 40'h0000000000;
  assign sm2__h1267 = number_2[17] ? (* src = "mk_multiply.v:315.23-315.70" *) { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h1572 = number_2[25] ? (* src = "mk_multiply.v:316.23-316.70" *) { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h642 = number_2[1] ? (* src = "mk_multiply.v:317.22-317.68" *) { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h962 = number_2[9] ? (* src = "mk_multiply.v:318.22-318.68" *) { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm3__h1268 = number_2[18] ? (* src = "mk_multiply.v:319.23-319.70" *) { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h1573 = number_2[26] ? (* src = "mk_multiply.v:320.23-320.70" *) { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h643 = number_2[2] ? (* src = "mk_multiply.v:321.22-321.68" *) { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h963 = number_2[10] ? (* src = "mk_multiply.v:322.22-322.69" *) { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm4__h1269 = number_2[19] ? (* src = "mk_multiply.v:323.23-323.70" *) { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h1574 = number_2[27] ? (* src = "mk_multiply.v:324.23-324.70" *) { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h644 = number_2[3] ? (* src = "mk_multiply.v:325.22-325.68" *) { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h964 = number_2[11] ? (* src = "mk_multiply.v:326.22-326.69" *) { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm5__h1270 = number_2[20] ? (* src = "mk_multiply.v:327.23-327.70" *) { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h1575 = number_2[28] ? (* src = "mk_multiply.v:328.23-328.70" *) { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h645 = number_2[4] ? (* src = "mk_multiply.v:329.22-329.68" *) { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h965 = number_2[12] ? (* src = "mk_multiply.v:330.22-330.69" *) { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm6__h1271 = number_2[21] ? (* src = "mk_multiply.v:331.23-331.70" *) { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h1576 = number_2[29] ? (* src = "mk_multiply.v:332.23-332.70" *) { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h646 = number_2[5] ? (* src = "mk_multiply.v:333.22-333.68" *) { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h966 = number_2[13] ? (* src = "mk_multiply.v:334.22-334.69" *) { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm7__h1272 = number_2[22] ? (* src = "mk_multiply.v:335.23-335.70" *) { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h1577 = number_2[30] ? (* src = "mk_multiply.v:336.23-336.70" *) { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h647 = number_2[6] ? (* src = "mk_multiply.v:337.22-337.68" *) { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h967 = number_2[14] ? (* src = "mk_multiply.v:338.22-338.69" *) { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm8__h1273 = number_2[23] ? (* src = "mk_multiply.v:339.23-339.70" *) { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h1578 = number_2[31] ? (* src = "mk_multiply.v:340.23-340.70" *) { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h648 = number_2[7] ? (* src = "mk_multiply.v:341.22-341.68" *) { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h968 = number_2[15] ? (* src = "mk_multiply.v:342.22-342.69" *) { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign \sign$D_IN  = get_inp_multiplier[31] ^ (* src = "mk_multiply.v:275.22-275.71" *) get_inp_multiplicand[31];
  assign RDY_get_out_snd = RDY_get_out_fst;
  assign c__h1559 = { 8'h00, number_1 };
  assign get_out_fst = sign3;
  assign \intermed_prod1$EN  = status_stg2;
  assign \intermed_prod2$EN  = status_stg2;
  assign \number_1$EN  = EN_get_inp;
  assign \number_2$EN  = EN_get_inp;
  assign \partial_prod0$D_IN  = { sum1_prime__h649, sum2_prime__h650 };
  assign \partial_prod0$EN  = status_stg1;
  assign \partial_prod1$D_IN  = { sum1_prime__h969, sum2_prime__h970 };
  assign \partial_prod1$EN  = status_stg1;
  assign \partial_prod2$D_IN  = { sum1_prime__h1274, sum2_prime__h1275 };
  assign \partial_prod2$EN  = status_stg1;
  assign \partial_prod3$D_IN  = { sum1_prime__h1579, sum2_prime__h1580 };
  assign \partial_prod3$EN  = status_stg1;
  assign \result$EN  = status_stg3;
  assign \sign$EN  = EN_get_inp;
  assign \sign1$D_IN  = sign;
  assign \sign1$EN  = status_stg1;
  assign \sign2$D_IN  = sign1;
  assign \sign2$EN  = status_stg2;
  assign \sign3$D_IN  = sign2;
  assign \sign3$EN  = status_stg3;
  assign \status_stg1$D_IN  = 1'h1;
  assign \status_stg1$EN  = EN_get_inp;
  assign \status_stg2$D_IN  = 1'h1;
  assign \status_stg2$EN  = status_stg1;
  assign \status_stg3$D_IN  = 1'h1;
  assign \status_stg3$EN  = status_stg2;
  assign \status_stg4$D_IN  = 1'h1;
  assign \status_stg4$EN  = status_stg3;
  assign x__h1926 = { 26'h0000000, partial_prod0[39:0] };
  assign x__h2053 = { 10'h000, partial_prod2[39:0], 16'h0000 };
  assign y__h1923 = { 18'h00000, partial_prod1[79:40], 8'h00 };
  assign y__h1925 = { 18'h00000, partial_prod1[39:0], 8'h00 };
  assign y__h1927 = { 26'h0000000, partial_prod0[79:40] };
  assign y__h2050 = { 2'h0, partial_prod3[79:40], 24'h000000 };
  assign y__h2052 = { 2'h0, partial_prod3[39:0], 24'h000000 };
  assign y__h2054 = { 10'h000, partial_prod2[79:40], 16'h0000 };
endmodule
