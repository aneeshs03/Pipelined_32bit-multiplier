/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

module mk_multiply(CLK, RST_N, get_inp_multiplicand, get_inp_multiplier, EN_get_inp, RDY_get_inp, get_out_fst, RDY_get_out_fst, get_out_snd, RDY_get_out_snd);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire [63:0] _02_;
  input CLK;
  wire CLK;
  input EN_get_inp;
  wire EN_get_inp;
  output RDY_get_inp;
  wire RDY_get_inp;
  output RDY_get_out_fst;
  wire RDY_get_out_fst;
  output RDY_get_out_snd;
  wire RDY_get_out_snd;
  input RST_N;
  wire RST_N;
  wire [39:0] c__h1559;
  input [31:0] get_inp_multiplicand;
  wire [31:0] get_inp_multiplicand;
  input [31:0] get_inp_multiplier;
  wire [31:0] get_inp_multiplier;
  output get_out_fst;
  wire get_out_fst;
  output [63:0] get_out_snd;
  wire [63:0] get_out_snd;
  reg [65:0] intermed_prod1;
  wire [65:0] \intermed_prod1$D_IN ;
  wire \intermed_prod1$EN ;
  reg [65:0] intermed_prod2;
  wire [65:0] \intermed_prod2$D_IN ;
  wire \intermed_prod2$EN ;
  reg [31:0] number_1;
  wire [31:0] \number_1$D_IN ;
  wire \number_1$EN ;
  reg [31:0] number_2;
  wire [31:0] \number_2$D_IN ;
  wire \number_2$EN ;
  wire [31:0] op_partial_prod1__h2350;
  wire [31:0] op_partial_prod2__h2405;
  wire [63:0] out__h2457;
  reg [79:0] partial_prod0;
  wire [79:0] \partial_prod0$D_IN ;
  wire \partial_prod0$EN ;
  reg [79:0] partial_prod1;
  wire [79:0] \partial_prod1$D_IN ;
  wire \partial_prod1$EN ;
  reg [79:0] partial_prod2;
  wire [79:0] \partial_prod2$D_IN ;
  wire \partial_prod2$EN ;
  reg [79:0] partial_prod3;
  wire [79:0] \partial_prod3$D_IN ;
  wire \partial_prod3$EN ;
  reg [65:0] result;
  wire [65:0] \result$D_IN ;
  wire \result$EN ;
  reg sign;
  wire \sign$D_IN ;
  wire \sign$EN ;
  reg sign1;
  wire \sign1$D_IN ;
  wire \sign1$EN ;
  reg sign2;
  wire \sign2$D_IN ;
  wire \sign2$EN ;
  reg sign3;
  wire \sign3$D_IN ;
  wire \sign3$EN ;
  wire [39:0] sm1__h1266;
  wire [39:0] sm1__h1571;
  wire [39:0] sm1__h641;
  wire [39:0] sm1__h961;
  wire [39:0] sm2__h1267;
  wire [39:0] sm2__h1572;
  wire [39:0] sm2__h642;
  wire [39:0] sm2__h962;
  wire [39:0] sm3__h1268;
  wire [39:0] sm3__h1573;
  wire [39:0] sm3__h643;
  wire [39:0] sm3__h963;
  wire [39:0] sm4__h1269;
  wire [39:0] sm4__h1574;
  wire [39:0] sm4__h644;
  wire [39:0] sm4__h964;
  wire [39:0] sm5__h1270;
  wire [39:0] sm5__h1575;
  wire [39:0] sm5__h645;
  wire [39:0] sm5__h965;
  wire [39:0] sm6__h1271;
  wire [39:0] sm6__h1576;
  wire [39:0] sm6__h646;
  wire [39:0] sm6__h966;
  wire [39:0] sm7__h1272;
  wire [39:0] sm7__h1577;
  wire [39:0] sm7__h647;
  wire [39:0] sm7__h967;
  wire [39:0] sm8__h1273;
  wire [39:0] sm8__h1578;
  wire [39:0] sm8__h648;
  wire [39:0] sm8__h968;
  reg status_stg1;
  wire \status_stg1$D_IN ;
  wire \status_stg1$EN ;
  reg status_stg2;
  wire \status_stg2$D_IN ;
  wire \status_stg2$EN ;
  reg status_stg3;
  wire \status_stg3$D_IN ;
  wire \status_stg3$EN ;
  reg status_stg4;
  wire \status_stg4$D_IN ;
  wire \status_stg4$EN ;
  wire [39:0] sum1_prime__h1274;
  wire [39:0] sum1_prime__h1579;
  wire [39:0] sum1_prime__h649;
  wire [39:0] sum1_prime__h969;
  wire [39:0] sum2_prime__h1275;
  wire [39:0] sum2_prime__h1580;
  wire [39:0] sum2_prime__h650;
  wire [39:0] sum2_prime__h970;
  wire [39:0] x__h1122;
  wire [39:0] x__h1123;
  wire [39:0] x__h1293;
  wire [39:0] x__h1294;
  wire [39:0] x__h1427;
  wire [39:0] x__h1428;
  wire [39:0] x__h1598;
  wire [39:0] x__h1599;
  wire [39:0] x__h1732;
  wire [39:0] x__h1733;
  wire [65:0] x__h1922;
  wire [65:0] x__h1924;
  wire [65:0] x__h1926;
  wire [65:0] x__h2049;
  wire [65:0] x__h2051;
  wire [65:0] x__h2053;
  wire [39:0] x__h668;
  wire [39:0] x__h669;
  wire [39:0] x__h819;
  wire [39:0] x__h820;
  wire [39:0] x__h988;
  wire [39:0] x__h989;
  wire [65:0] y__h1923;
  wire [65:0] y__h1925;
  wire [65:0] y__h1927;
  wire [65:0] y__h2050;
  wire [65:0] y__h2052;
  wire [65:0] y__h2054;
  assign \intermed_prod1$D_IN  = x__h1922 + { 18'h00000, partial_prod1[79:40], 8'h00 };
  assign \intermed_prod2$D_IN  = x__h2049 + { 2'h0, partial_prod3[79:40], 24'h000000 };
  assign \result$D_IN  = intermed_prod1 + intermed_prod2;
  assign op_partial_prod1__h2350 = _00_ + 32'd1;
  assign op_partial_prod2__h2405 = _01_ + 32'd1;
  assign out__h2457 = _02_ + 64'h0000000000000001;
  assign sum1_prime__h1274 = x__h1293 + sm4__h1269;
  assign sum1_prime__h1579 = x__h1598 + sm4__h1574;
  assign sum1_prime__h649 = x__h668 + sm4__h644;
  assign sum1_prime__h969 = x__h988 + sm4__h964;
  assign sum2_prime__h1275 = x__h1427 + sm8__h1273;
  assign sum2_prime__h1580 = x__h1732 + sm8__h1578;
  assign sum2_prime__h650 = x__h819 + sm8__h648;
  assign sum2_prime__h970 = x__h1122 + sm8__h968;
  assign x__h1122 = x__h1123 + sm7__h967;
  assign x__h1123 = sm5__h965 + sm6__h966;
  assign x__h1293 = x__h1294 + sm3__h1268;
  assign x__h1294 = sm1__h1266 + sm2__h1267;
  assign x__h1427 = x__h1428 + sm7__h1272;
  assign x__h1428 = sm5__h1270 + sm6__h1271;
  assign x__h1598 = x__h1599 + sm3__h1573;
  assign x__h1599 = sm1__h1571 + sm2__h1572;
  assign x__h1732 = x__h1733 + sm7__h1577;
  assign x__h1733 = sm5__h1575 + sm6__h1576;
  assign x__h1922 = x__h1924 + { 18'h00000, partial_prod1[39:0], 8'h00 };
  assign x__h1924 = { 26'h0000000, partial_prod0[39:0] } + { 26'h0000000, partial_prod0[79:40] };
  assign x__h2049 = x__h2051 + { 2'h0, partial_prod3[39:0], 24'h000000 };
  assign x__h2051 = { 10'h000, partial_prod2[39:0], 16'h0000 } + { 10'h000, partial_prod2[79:40], 16'h0000 };
  assign x__h668 = x__h669 + sm3__h643;
  assign x__h669 = sm1__h641 + sm2__h642;
  assign x__h819 = x__h820 + sm7__h647;
  assign x__h820 = sm5__h645 + sm6__h646;
  assign x__h988 = x__h989 + sm3__h963;
  assign x__h989 = sm1__h961 + sm2__h962;
  always @(posedge CLK)
    if (!RST_N) status_stg4 <= 1'h0;
    else if (status_stg3) status_stg4 <= 1'h1;
  always @(posedge CLK)
    if (!RST_N) status_stg3 <= 1'h0;
    else if (status_stg2) status_stg3 <= 1'h1;
  always @(posedge CLK)
    if (!RST_N) status_stg2 <= 1'h0;
    else if (status_stg1) status_stg2 <= 1'h1;
  always @(posedge CLK)
    if (!RST_N) status_stg1 <= 1'h0;
    else if (EN_get_inp) status_stg1 <= 1'h1;
  always @(posedge CLK)
    if (!RST_N) sign3 <= 1'h0;
    else if (status_stg3) sign3 <= sign2;
  always @(posedge CLK)
    if (!RST_N) sign2 <= 1'h0;
    else if (status_stg2) sign2 <= sign1;
  always @(posedge CLK)
    if (!RST_N) sign1 <= 1'h0;
    else if (status_stg1) sign1 <= sign;
  always @(posedge CLK)
    if (!RST_N) sign <= 1'h0;
    else if (EN_get_inp) sign <= \sign$D_IN ;
  always @(posedge CLK)
    if (!RST_N) result <= 66'h00000000000000000;
    else if (status_stg3) result <= \result$D_IN ;
  always @(posedge CLK)
    if (!RST_N) partial_prod3 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod3 <= { sum1_prime__h1579, sum2_prime__h1580 };
  always @(posedge CLK)
    if (!RST_N) partial_prod2 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod2 <= { sum1_prime__h1274, sum2_prime__h1275 };
  always @(posedge CLK)
    if (!RST_N) partial_prod1 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod1 <= { sum1_prime__h969, sum2_prime__h970 };
  always @(posedge CLK)
    if (!RST_N) partial_prod0 <= 80'h00000000000000000000;
    else if (status_stg1) partial_prod0 <= { sum1_prime__h649, sum2_prime__h650 };
  always @(posedge CLK)
    if (!RST_N) number_2 <= 32'd0;
    else if (EN_get_inp) number_2 <= \number_2$D_IN ;
  always @(posedge CLK)
    if (!RST_N) number_1 <= 32'd0;
    else if (EN_get_inp) number_1 <= \number_1$D_IN ;
  always @(posedge CLK)
    if (!RST_N) intermed_prod2 <= 66'h00000000000000000;
    else if (status_stg2) intermed_prod2 <= \intermed_prod2$D_IN ;
  always @(posedge CLK)
    if (!RST_N) intermed_prod1 <= 66'h00000000000000000;
    else if (status_stg2) intermed_prod1 <= \intermed_prod1$D_IN ;
  assign RDY_get_out_fst = status_stg1 && status_stg4;
  assign RDY_get_inp = ! status_stg1;
  assign _00_ = ~ get_inp_multiplicand;
  assign _01_ = ~ get_inp_multiplier;
  assign _02_ = ~ result[63:0];
  assign get_out_snd = sign3 ? out__h2457 : result[63:0];
  assign \number_1$D_IN  = get_inp_multiplicand[31] ? op_partial_prod1__h2350 : { 1'h0, get_inp_multiplicand[30:0] };
  assign \number_2$D_IN  = get_inp_multiplier[31] ? op_partial_prod2__h2405 : { 1'h0, get_inp_multiplier[30:0] };
  assign sm1__h1266 = number_2[16] ? { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h1571 = number_2[24] ? { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h641 = number_2[0] ? { 8'h00, number_1 } : 40'h0000000000;
  assign sm1__h961 = number_2[8] ? { 8'h00, number_1 } : 40'h0000000000;
  assign sm2__h1267 = number_2[17] ? { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h1572 = number_2[25] ? { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h642 = number_2[1] ? { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm2__h962 = number_2[9] ? { 7'h00, number_1, 1'h0 } : 40'h0000000000;
  assign sm3__h1268 = number_2[18] ? { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h1573 = number_2[26] ? { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h643 = number_2[2] ? { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm3__h963 = number_2[10] ? { 6'h00, number_1, 2'h0 } : 40'h0000000000;
  assign sm4__h1269 = number_2[19] ? { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h1574 = number_2[27] ? { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h644 = number_2[3] ? { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm4__h964 = number_2[11] ? { 5'h00, number_1, 3'h0 } : 40'h0000000000;
  assign sm5__h1270 = number_2[20] ? { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h1575 = number_2[28] ? { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h645 = number_2[4] ? { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm5__h965 = number_2[12] ? { 4'h0, number_1, 4'h0 } : 40'h0000000000;
  assign sm6__h1271 = number_2[21] ? { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h1576 = number_2[29] ? { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h646 = number_2[5] ? { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm6__h966 = number_2[13] ? { 3'h0, number_1, 5'h00 } : 40'h0000000000;
  assign sm7__h1272 = number_2[22] ? { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h1577 = number_2[30] ? { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h647 = number_2[6] ? { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm7__h967 = number_2[14] ? { 2'h0, number_1, 6'h00 } : 40'h0000000000;
  assign sm8__h1273 = number_2[23] ? { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h1578 = number_2[31] ? { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h648 = number_2[7] ? { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign sm8__h968 = number_2[15] ? { 1'h0, number_1, 7'h00 } : 40'h0000000000;
  assign \sign$D_IN  = get_inp_multiplier[31] ^ get_inp_multiplicand[31];
  assign RDY_get_out_snd = RDY_get_out_fst;
  assign c__h1559 = { 8'h00, number_1 };
  assign get_out_fst = sign3;
  assign \intermed_prod1$EN  = status_stg2;
  assign \intermed_prod2$EN  = status_stg2;
  assign \number_1$EN  = EN_get_inp;
  assign \number_2$EN  = EN_get_inp;
  assign \partial_prod0$D_IN  = { sum1_prime__h649, sum2_prime__h650 };
  assign \partial_prod0$EN  = status_stg1;
  assign \partial_prod1$D_IN  = { sum1_prime__h969, sum2_prime__h970 };
  assign \partial_prod1$EN  = status_stg1;
  assign \partial_prod2$D_IN  = { sum1_prime__h1274, sum2_prime__h1275 };
  assign \partial_prod2$EN  = status_stg1;
  assign \partial_prod3$D_IN  = { sum1_prime__h1579, sum2_prime__h1580 };
  assign \partial_prod3$EN  = status_stg1;
  assign \result$EN  = status_stg3;
  assign \sign$EN  = EN_get_inp;
  assign \sign1$D_IN  = sign;
  assign \sign1$EN  = status_stg1;
  assign \sign2$D_IN  = sign1;
  assign \sign2$EN  = status_stg2;
  assign \sign3$D_IN  = sign2;
  assign \sign3$EN  = status_stg3;
  assign \status_stg1$D_IN  = 1'h1;
  assign \status_stg1$EN  = EN_get_inp;
  assign \status_stg2$D_IN  = 1'h1;
  assign \status_stg2$EN  = status_stg1;
  assign \status_stg3$D_IN  = 1'h1;
  assign \status_stg3$EN  = status_stg2;
  assign \status_stg4$D_IN  = 1'h1;
  assign \status_stg4$EN  = status_stg3;
  assign x__h1926 = { 26'h0000000, partial_prod0[39:0] };
  assign x__h2053 = { 10'h000, partial_prod2[39:0], 16'h0000 };
  assign y__h1923 = { 18'h00000, partial_prod1[79:40], 8'h00 };
  assign y__h1925 = { 18'h00000, partial_prod1[39:0], 8'h00 };
  assign y__h1927 = { 26'h0000000, partial_prod0[79:40] };
  assign y__h2050 = { 2'h0, partial_prod3[79:40], 24'h000000 };
  assign y__h2052 = { 2'h0, partial_prod3[39:0], 24'h000000 };
  assign y__h2054 = { 10'h000, partial_prod2[79:40], 16'h0000 };
endmodule
